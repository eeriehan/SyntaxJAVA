Collections Framework:
    It's a collection of classes and interfaces that help us store and manipulate the data efficiently.
Why we should use Collections Framework?
1.  Its flexible (we don't need to provide size beforehand).
2.  It's dynamic (all the classes can increase and decrease their size at run time).
3.  There are built-in methods to perform common tasks.
4.  Pre-built data structures.

downsides of Collections framework:
1.  we can't use primitive data types we have to use wrapper classes which occupy
    4 times more memory.

    int num = 10;        // 4 memory locations
    Integer num1 = 10;      // 16 memory locations
 =================================================================
Wrapper:
    Wrapper classes are object types for all the primitive types

why should we learn about the wrapper types?
1.  because collections framework only supports wrapper types.
2.


downsides of Wrapper:
1.  we can't use primitive data types we have to use wrapper classes which occupy
    4 times more memory.

    int num = 10;        // 4 memory locations
    Integer num1 = 10;      // 16 memory locations

Boxing:
    Converting a primitive to its corresponding wrapper type by manually calling methods.

    int pNum = 10;
    Integer wNum = new Integer(pNum);

Auto Boxing:
    Conversion from primitive to a wrapper type but here we don't need to call any methods explicitly.

    int pNum = 10;
    Integer wNum = pNum;

Unboxing:
    Converting a wrapper to a primitive by calling a method.

    Integer wNum = new Integer(10);
    int pNum = wNum.intValue();

AutoUnboxing:
    Converting a wrapper to a primitive without calling any methods.

    Integer wNum = new Integer(10);
    int pNum = wNum;

 =============================================================================================

ArrayList Class:
    it is a classes in collections framework that allows us to store data like an array.
    some common methods from this class are
    1) add()        2) remove   3) contains     4) size().....

Iterator:   (traversing)
    its a mechanism that allows us to iterate and delete data from any class in collections framework.
    1) hasNext()    2) next()   3) remove().....

    Why we should learn about Iterator?:
    Because loops are not safe when we perform an operation that can change the size of a data structure.

ArrayList Vs LinkedList:
    Both of the classes implement the list interface which means both of them will have same methods.

ArrayList:  use an array behind the scenes to store the data.
            we should use arrayList when we are retrieving the data most of the time and not inserting the
            data in the start or in-between. if we have to shift the data. to the list.
LinkedList: Linked-list does not store the data consecutive memory locations that's why it is easier to insert and
            remove the data from anywhere in a list.
            if you are going to manipulate the data(shifting of elements): always use linked-list.

if most of the time you use:    add or remove:  then use linkedList.
if most of the time you use:    get method:     then use ArrayList.








